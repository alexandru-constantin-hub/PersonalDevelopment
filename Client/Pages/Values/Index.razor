@page "/values"
@using Microsoft.AspNetCore.Authorization
@using PersonalDevelopment.Client.Shared.Components
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3>Values</h3>

@if (Model == null)
{
    <Loading />
}
else
{
    <a href="/values/create" class="btn btn-secondary">Create new value</a>

    <div class="card-group">
        @foreach (var value in Model)
        {
            <div class="card">
                <img class="card-img-top card-value-image" alt="Value image" style="background-image: url('/img/wandering_mind.svg');">
                <div class="card-body">
                    <h5 class="card-title">@value.Name</h5>
                    <p class="card-text">@value.Description</p>
                    <p class="card-text">
                        <a href="/values/view/@value.Id" class="btn btn-primary">Detail</a>
                        <a href="/values/edit/@value.Id" class="btn btn-primary">Edit</a>
                        <button class="btn btn-danger" @onclick="(()=>Delete(value.Id))"></button>
                    </p>
                </div>
            </div>
        }
    </div>
}
@code {
    private List<Value> Model;

    protected async override Task OnInitializedAsync()
    {
        Model = await _client.GetFromJsonAsync<List<Value>>("/api/values");
    }

    async Task Delete(int valueId)
    {
        var value = Model.First(q => q.Id == valueId);
        var confirm = await js.InvokeAsync<bool>("confirm", "Do you want to delete " + value.Name);
        if (confirm)
        {
            await _client.DeleteAsync("/api/values/" + valueId);
            await OnInitializedAsync();
        }

    }

}
