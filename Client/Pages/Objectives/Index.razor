@page "/objectives"
@using Microsoft.AspNetCore.Authorization
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


@if (Model == null)
{
    <Loading />
}
else
{

    <div class="row">
        <div class="col-10">
            <Breadcrumb BreadcrumbElements=@breadcrumbLink ActivePage="Your objectives" Title="Your objectives" />
        </div>
        <Bookmark Link="/objectives/create" Icon="bi-plus-square" />
    </div>

    <div class="row row-cols-1 row-cols-md-2 g-4">
        @foreach (var value in Model)
        {
            <div class="col">
                <div class="card h-100 d-flex flex-row p-0 card-values">

                    @if (value.ImageLink != null)
                    {
                        <div class="card-value-image" style="background-image: url('@value.ImageLink');"></div>
                    }


                    <div class="card-body @((value.ImageLink !=null)? "px-3" : "px-4") py-3 h-100">
                        <div class="value-card-content d-flex flex-column h-100">
                            <h5 class="card-title pb-2">@value.Name</h5>
                            <div class="setting-list">
                                <ul class="list-unstyled setting-option list-group list-group-horizontal" style="width:@(Open? 60: 10)px">
                                    <li>
                                        <div class="setting-primary">
                                            <i class="bi bi-three-dots-vertical" @onclick="Toggle"></i>
                                        </div>
                                    </li>
                                    <li><a href="/values/edit/@value.Id"><i class="bi bi-pencil-square"></i></a></li>
                                    <li><a type="button" @onclick="(()=>Delete(value.Id))" class="px-1"><i class="bi bi-x-square"></i></a></li>
                                </ul>
                            </div>
                            <p class="card-text overflow-auto pb-2">@value.Description</p>

                            <p class="mt-auto">
                                <button class="btn btn-outline-primary btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@value.Id" aria-expanded="false" aria-controls="collapse-@value.Id">
                                    SMART?
                                </button>
                            </p>
                            <div class="collapse" id="collapse-@value.Id">
                                <div class="card card-body">
                                    <div class="form-check form-switch">
                                        @if (value.Specific == true) {
                                            <input class="form-check-input" type="checkbox" id="checkbox-Specific-@value.Id" checked>
                                        } else
                                        {
                                            <input class="form-check-input" type="checkbox" id="checkbox-Specific-@value.Id">
                                        }
                                        <label class="form-check-label" for="checkbox-Specific-@value.Id">Specific</label>
                                    </div>
                                    <div class="form-check form-switch">
                                        @if (value.Measurable == true) {
                                            <input class="form-check-input" type="checkbox" id="checkbox-Measurable-@value.Id" checked>
                                        } else
                                        {
                                            <input class="form-check-input" type="checkbox" id="checkbox-Measurable-@value.Id">
                                        }
                                        <label class="form-check-label" for="checkbox-Measurable-@value.Id">Measurable</label>
                                    </div>
                                    <div class="form-check form-switch">
                                        @if (value.Relevant == true) {
                                            <input class="form-check-input" type="checkbox" id="checkbox-Relevant-@value.Id" checked>
                                        } else
                                        {
                                            <input class="form-check-input" type="checkbox" id="checkbox-Relevant-@value.Id">
                                        }
                                        <label class="form-check-label" for="checkbox-Relevant-@value.Id">Relevant</label>
                                    </div>
                                    <div class="form-check form-switch">
                                        @if (value.Achievable == true) {
                                            <input class="form-check-input" type="checkbox" id="checkbox-Achievable-@value.Id" checked>
                                        } else
                                        {
                                            <input class="form-check-input" type="checkbox" id="checkbox-Achievable-@value.Id">
                                        }
                                        <label class="form-check-label" for="checkbox-Achievable-@value.Id">Achievable</label>
                                    </div>
                                     <div class="form-check form-switch">
                                        @if (value.Time == true) {
                                            <input class="form-check-input" type="checkbox" id="checkbox-Time-@value.Id" checked>
                                        } else
                                        {
                                            <input class="form-check-input" type="checkbox" id="checkbox-Time-@value.Id">
                                        }
                                        <label class="form-check-label" for="checkbox-Time-@value.Id">Time</label>
                                    </div>
                                </div>
                            </div>

                        </div>

                    </div>
                </div>


            </div>
        }
    </div>





}

@code {
    private List<Objective> Model;

    protected async override Task OnInitializedAsync()
    {
        Model = await _client.GetFromJsonAsync<List<Objective>>("/api/objectives");
    }

    async Task Delete(int objectiveId)
    {
        var objective = Model.First(q => q.Id == objectiveId);
        var confirm = await js.InvokeAsync<bool>("confirm", "Do you want to delete " + objective.Name);
        if (confirm)
        {
            await _client.DeleteAsync("/api/objectives/" + objectiveId);
            await OnInitializedAsync();
        }

    }

    public bool Open { get; set; } = false;
    public void Toggle()
    {
        Open = !Open;
    }

    public Dictionary<string, string> breadcrumbLink { get; set; } =
    new Dictionary<string, string>()
                            {
                { "Home", "/" }
                            };

}
